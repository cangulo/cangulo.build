# name: Print GitVersion

# on:
#   workflow_dispatch:

# jobs:
#   process-update-in-pr:
#     name: Release Patch
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - name: Install GitVersion
#         uses: gittools/actions/gitversion/setup@v0.9.7
#         with:
#           versionSpec: '5.x'
#       - name: Determine Version
#         id:   gitversion
#         uses: gittools/actions/gitversion/execute@v0.9.7
#         with:
#           useConfigFile: true
#           configFilePath: GitVersion.yml
#       - name: Display GitVersion outputs
#         run: |
#           echo "Major: ${{ steps.gitversion.outputs.major }}"
#           echo "Minor: ${{ steps.gitversion.outputs.minor }}"
#           echo "Patch: ${{ steps.gitversion.outputs.patch }}"
#           echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
#           echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
#           echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
#           echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
#           echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
#           echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
#           echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
#           echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
#           echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
#           echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
#           echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
#           echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
#           echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
#           echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
#           echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
#           echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
#           echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
#           echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
#           echo "Sha: ${{ steps.gitversion.outputs.sha }}"
#           echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
#           echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
#           echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
#           echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
#           echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
#           echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
#           echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
#           echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
#           echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
#           echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"


#       # - name: Construct GetCommitsActions Request
#       #   id: get-commits-actions
#       #   run: |
#       #     GET_COMMITS_ACTIONS_REQUEST=$(cat <<-END
#       #       {
#       #           \"requestModel\":\"GetCommitsActions\",
#       #           \"originator\":\"${{ github.actor }}-${{ github.event_name }}\",
#       #           \"pullRequestNumber\":${{ github.event.number }},
#       #           \"repositoryId\":${{ github.event.repository.id }}
#       #       }
#       #     END
#       #     )
#       #     echo ::set-output name=REQUEST::$(echo $GET_COMMITS_ACTIONS_REQUEST)
#       #     echo "$GET_COMMITS_ACTIONS_REQUEST"
#       # - name: GetCommitsActions Nuke
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       #     OUTPUT_FILE_PATH: "./artifacs"
#       #   run: |
#       #     chmod +x ./build.sh
#       #     ./build.sh --root . --target GenericRequestHandler --requestJSON "${{ steps.get-commits-actions.outputs.REQUEST }}" --verbosity verbose
#       # - name: GetCommitsActions Response
#       #   run: cat ./artifacs/GetCommitsActions_RESPONSE.json
#       # - name: Construct ProcessCommitActions Request
#       #   id: process-commits-actions
#       #   run: |
#       #     PROCESS_COMMITS_ACTIONS_REQUEST=$(cat <<-END
#       #       {
#       #           \"requestModel\":\"ProcessCommitActions\",
#       #           \"originator\":\"${{ github.actor }}-${{ github.event_name }}\",
#       #           \"commitActions\": $(jq . ./artifacs/GetCommitsActions_RESPONSE.json -c | jq -aR) 
#       #       }
#       #     END
#       #     )
#       #     echo ::set-output name=REQUEST::$(echo $PROCESS_COMMITS_ACTIONS_REQUEST)
#       #     echo "$PROCESS_COMMITS_ACTIONS_REQUEST"
#       # - name: ProcessCommitActions Nuke
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       #     OUTPUT_FILE_PATH: "./artifacs"
#       #   run: |
#       #     chmod +x ./build.sh
#       #     ./build.sh --root . --target GenericRequestHandler --requestJSON "${{ steps.process-commits-actions.outputs.REQUEST }}" --verbosity verbose
#       # - name: ProcessCommitActions Response
#       #   run: cat ./artifacs/ProcessCommitActions_RESPONSE.json
